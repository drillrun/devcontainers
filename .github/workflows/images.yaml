name: release
on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
      images:
        default: '["all"]'
        type: string
      tags:
        default: '["all"]'
        type: string
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.matrix.outputs.images }}
      tags: ${{ steps.matrix.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - id: matrix
        shell: python
        run: |
          import json
          import os
          import pathlib

          IMAGES = [p.stem for p in pathlib.Path("images").glob("*")]
          TAGS=list({p.stem for p in pathlib.Path("images").glob("**") if p.parent.stem in IMAGES})

          def filter_matrix_variant(variant, filters):
            if "all" in filters:
              return variant
            else:
              return [v for v in variant if v in filters]

          requested_images = json.loads("""${{ github.event.inputs.images || '["all"]' }}""")
          matrix_images = filter_matrix_variant(IMAGES, requested_images)

          requested_tags = json.loads("""${{ github.event.inputs.tags || '["all"]' }}""")
          matrix_tags = filter_matrix_variant(TAGS, requested_tags)

          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            print(os.environ["GITHUB_OUTPUT"])
            print(f"images={json.dumps(matrix_images)}", file=f)
            print(f"tags={json.dumps(matrix_tags)}", file=f)
  image:
    runs-on: ubuntu-latest
    name: build ${{ matrix.image }}/${{ matrix.tag }}
    needs: [build-matrix]
    strategy:
      matrix:
        image: ${{ fromJSON(needs.build-matrix.outputs.images ) }}
        tag: ${{ fromJSON(needs.build-matrix.outputs.tags ) }}
        exclude:
          - image: alpine
            tag: python
          - image: alpine
            tag: rust
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub üóùÔ∏è
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: devcontainers/ci@v0.3
        with: 
          subFolder: images/${{ matrix.image }}/${{ matrix.tag }}
          imageName: ghcr.io/${{ github.repository}}/images/${{ matrix.image }}-${{ matrix.tag }}
          imageTag: ${{github.event.inputs.version || github.ref_name }},latest